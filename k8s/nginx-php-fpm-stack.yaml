# First, create a ConfigMap whose contents are used
# as the nginx.conf file in the web server. 
# This server uses /var/www/html as its
# root document directory. When the server gets a 
# request for *.php, it will forward that request
# to our PHP-FPM container.

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config
data:
  nginx.conf: |
    user www-data;
    events {
    }
    http {
      server {
        listen 80 default_server;
        listen [::]:80 default_server;
        
        # Set nginx to serve files from the shared volume!
        root /var/www/html;
        server_name _;
        location / {
          try_files $uri $uri/ =404;
        }
        location ~ \.php$ {
          include fastcgi_params;
          fastcgi_param REQUEST_METHOD $request_method;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_pass unix:/run/php-fpm/www.sock;
        }
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-php-fpm
spec:
  ports:
  - name: 80-tcp
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx-php-fpm
  type: LoadBalancer
---
# Create a pod containing the PHP-FPM application (my-php-app)
# and nginx, each mounting the `shared-files` volume to their
# respective /var/www/html directories.

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-php-fpm
  name: nginx-php-fpm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: nginx-php-fpm
  strategy: 
    type: Recreate
  template:
    metadata:
      labels: 
        app: nginx-php-fpm
    spec:
      volumes:
        # Create the shared files volume to be used in both pods
        - name: shared-files
          emptyDir: {}

        # Add the ConfigMap we declared above as a volume for the pod
        - name: nginx-config-volume
          configMap:
            name: nginx-config
      
        # Add a memory mapped emptyDir for nginx to php-fpm unix socket
        - name: run-php-fpm
          emptyDir:
            medium: Memory
      containers:
        # Our PHP-FPM application
        - image: my-php-app:1.0.0
          name: app
          volumeMounts:
            - name: shared-files
              mountPath: /var/www/html

            # Shared path for the unix socket
            - name: run-php-fpm
              mountPath: /run/php-fpm

          # Important! After this container has started, the PHP files
          # in our Docker image aren't in the shared volume. We need to
          # get them into the shared volume. If we tried to write directly
          # to this volume from our Docker image the files wouldn't appear
          # in the nginx container.
          #
          # So, after the container has started, copy the PHP files from this
          # container's local filesystem (/app -- added via the Docker image)
          # to the shared volume, which is mounted at /var/www/html.
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "cp -r /app/. /var/www/html"]

        # Our nginx container, which uses the configuration declared above,
        # along with the files shared with the PHP-FPM app.
        - image: nginx:1.7.9
          name: nginx
          volumeMounts:
            - name: shared-files
              mountPath: /var/www/html

            # Shared path for the unix socket
            - name: run-php-fpm
              mountPath: /run/php-fpm

            - name: nginx-config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
